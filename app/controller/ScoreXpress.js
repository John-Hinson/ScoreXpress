/*
 * File: app/controller/ScoreXpress.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('ScoreXpress.controller.ScoreXpress', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            scoreXpressForm: 'scorexpressform',
            topTabBar: 'tabbar'
        },

        control: {
            "#newBtn": {
                tap: 'onNewBtnTap'
            },
            "#deleteBtn": {
                tap: 'onDeleteBtnTap'
            },
            "#saveBtn": {
                tap: 'onSaveBtnTap'
            },
            "#addBtn": {
                tap: 'onAddBtnTap'
            },
            "list#scoreList": {
                itemtap: 'onScoreListItemTap'
            }
        }
    },

    onNewBtnTap: function(button, e, eOpts) {

        this.clearScoreXpressForm();
    },

    onDeleteBtnTap: function(button, e, eOpts) {
          //get a reference to the form panel
                 var fp = this.getScoreXpressForm();

                 //get the model previously loaded into this form
                 var mod = fp.getRecord();

                 //if the model exists, remove it from the "Assets" store and go back to this list with a clear form
                 if (mod){
                     var as = Ext.getStore('KPIStore');
                     as.remove(mod);

                     this.getTopTabBar().setActiveTab(1);
                     this.clearScoreXpressForm();

          }
    },

    onSaveBtnTap: function(button, e, eOpts) {
         var me = this;

                // get a reference to the form panel
                var fp = me.getScoreXpressForm();

                // get the model previously loaded into this form
                var mod = fp.getRecord();

                // if model exists, update the model with the
                // information from the form
                if (mod){

                    fp.updateRecord(mod);
                    me.doCalculation(mod,fp);


                }
                else{
                    // otherwise:
                    // create a new model,
                    // update it with the form information
                    // and add it to the store
                    mod = Ext.create('ScoreXpress.model.KPIModel');


                    fp.updateRecord(mod);


                     me.doCalculation(mod,fp);
                    Ext.getStore('KPIStore').add(mod);



                }



                Ext.Msg.alert('Success','Your info was saved successfully', function(){
                    me.clearScoreXpressForm();

                });

    },

    onAddBtnTap: function(button, e, eOpts) {
        this.clearScoreXpressForm();
        this.getTopTabBar().setActiveTab(1);

    },

    onScoreListItemTap: function(dataview, index, target, record, e, eOpts) {
        	// the record parameter passed to this function contains a pointer
                // to the model that the user tapped in the list
                // load this model's data into the form
                this.getScoreXpressForm().setRecord(record);

                // then, make the form visible:
                //   switch over to the Entry tab (the first tab)
                this.getTopTabBar().setActiveTab(1);
    },

    clearScoreXpressForm: function() {
         // get a reference to the form panel
                  var fp = this.getScoreXpressForm();

                  // set all the fields in the form to their default values
                  fp.setValues({
                      KPIName: '',
                      CurrentValue: '',
                      TargetValue: '',
                      MinTolerance: 2,
                      MaxTolerance: 2,
                      LowIsBetter: 'LowerIsBetter',
                      Variance: 0,
                      PercentChange: 0,
                      Comment: '',
                      LastUpdate:new Date(),
                      ImageTag:'6',
                      TimeSince:'',
                      ArrowTag:'white-arrow-down'
                  });

                  //set the model referenc to null.
                  //This is necessary because when we tap the save button, we check to
                  // see whether an existing model has been loaded into the form.
                  // (see the save funtion for more details)
                fp.setRecord(null);
    },

    doCalculation: function(mod, fp) {


                       var vCurrentValue = mod.get('CurrentValue');

                       var vTargetValue = mod.get('TargetValue');
                       var vMinTolerance = mod.get('MinTolerance');
                       var vMaxTolerance = mod.get('MaxTolerance');
                       var vLastUpdate = mod.get('LastUpdate');
                       var vTimeSince = mod.get('TimeSince');
                       var vPercentChange = mod.get('PercentChange');
                       var vImageTag = mod.get('ImageTag');
                       var vLowerIsBetter = mod.get('LowIsBetter');
                       var vConsLowerIsBetter = "LowerIsBetter";
                       var vConsHigherIsBetter = "HigherIsBetter";
                       var vArrowTag =mod.get('ArrowTag');



                       var vPercentChanged, vPercentDecimal;

                      //Finding the Variance
                       var vVarianceTotal = vCurrentValue - vTargetValue;
                       var vVariance = Math.round(vVarianceTotal * 10) / 10;


                       var vFlagColor;

                       //Setting up PercentChange
                       vPercentDecimal = vVariance / vTargetValue;
                       vPercentChanged= vPercentDecimal * 100;
                       vPercentChange=vPercentChanged.toFixed(2);

        /*var num = parseFloat(15.7784514);
        document.write(num.toFixed(1)+"<br />");
        document.write(num.toFixed(2)+"<br />");
        document.write(num.toFixed(3)+"<br />");
        document.write(num.toFixed(10));

        15.8
        15.78
        15.778
        15.7784514000
        */


                       var today= new Date();

                       //Finding the Days since last update
                       var vTimeSince = vLastUpdate;



                       //Setting up variance
                       Ext.getCmp('Variance').setValue(vVariance);

                       mod.set(Variance, vVariance);


                       //Setting up LastUpdate
                       //Ext.getCmp('LastUpdate').setValue(vLastUpdate);

                      // mod.set(LastUpdate, vLastUpdate);

                     //Setting up TimeSince
                       Ext.getCmp('TimeSince').setValue(vTimeSince);

                       mod.set(TimeSince, vTimeSince);



                      //SetArrow
                        if (vVariance > 0){
                                 vArrowTag="white-arrow-up";
                            }else{
                                 vArrowTag="white-arrow-down";

                        }
                        Ext.getCmp('ArrowTag').setValue(vArrowTag);

                         mod.set(ArrowTag, vArrowTag);



                       //Variance Changed
                       Ext.getCmp('PercentChange').setValue(vPercentChange);

                       mod.set(PercentChange, vPercentChange);


                        //Setting Badge Color
                        //alert(vLowerIsBetter);
                        //Green
                        if (vPercentChange > vMaxTolerance){
                            if(vConsLowerIsBetter == vLowerIsBetter){

                                 vImageTag="5";
                            }else{
                                 vImageTag="1";

                            }


                        }

                        //Red
                        if (vPercentChange < vMaxTolerance){
                            if(vConsHigherIsBetter == vLowerIsBetter){

                                 vImageTag="1";
                            }else{
                                 vImageTag="5";

                            }

                        }


        //alert("Min Tolerance:  " + -Math.abs(vMinTolerance) + "Max Tolerance:  " + vMaxTolerance + " -  Percent Change: " +  vPercentChange);
                        //Yellow
                        if (vPercentChange > -Math.abs(vMinTolerance) && vPercentChange < vMaxTolerance){
                            vImageTag="3";

                        }

                       //Change Badge Color and Set Image
                       Ext.getCmp('ImageTag').setValue(vImageTag);

                       mod.set(ImageTag, vImageTag);






                       fp.updateRecord(mod);





    }

});